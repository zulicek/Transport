// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Transport.Models;

namespace Transport.Data.Migrations
{
    [DbContext(typeof(transportContext))]
    [Migration("20180609213534_AddId")]
    partial class AddId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Transport.Models.Korisnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("char(100)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("char(100)");

                    b.Property<string>("Lozinka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Oib")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("TelBroj")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("KorisnickoIme")
                        .IsUnique()
                        .HasName("UK_Korisnik");

                    b.ToTable("Korisnik");
                });

            modelBuilder.Entity("Transport.Models.Lokacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdMjesto");

                    b.Property<int>("IdVrstaLokacije");

                    b.Property<int>("KucniBroj");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("IdMjesto");

                    b.HasIndex("IdVrstaLokacije");

                    b.ToTable("Lokacija");
                });

            modelBuilder.Entity("Transport.Models.Mjesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("PostanskiBroj");

                    b.HasKey("Id");

                    b.HasIndex("PostanskiBroj")
                        .IsUnique()
                        .HasName("UK_Mjesto");

                    b.ToTable("Mjesto");
                });

            modelBuilder.Entity("Transport.Models.Naplata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdPrijevoz");

                    b.Property<int>("IdRazlog");

                    b.Property<int>("IdVrstaNaplate");

                    b.Property<DateTime?>("RokIzvrsenjaNaplate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdPrijevoz");

                    b.HasIndex("IdRazlog");

                    b.HasIndex("IdVrstaNaplate");

                    b.ToTable("Naplata");
                });

            modelBuilder.Entity("Transport.Models.Narucitelj", b =>
                {
                    b.Property<int>("IdKorisnik");

                    b.Property<string>("ZahtijevaEko")
                        .HasColumnName("zahtijevaEko")
                        .HasColumnType("text");

                    b.HasKey("IdKorisnik");

                    b.ToTable("Narucitelj");
                });

            modelBuilder.Entity("Transport.Models.PonudaPrijevoza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Cijena");

                    b.Property<double?>("CijenaOtkaza");

                    b.Property<int>("IdPrijevoznik");

                    b.Property<int>("IdStatusPonude");

                    b.Property<int>("IdZahtjev");

                    b.Property<DateTime?>("RokIstekaPonude")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RokOtkazaPonude")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdPrijevoznik");

                    b.HasIndex("IdStatusPonude");

                    b.HasIndex("IdZahtjev");

                    b.ToTable("PonudaPrijevoza");
                });

            modelBuilder.Entity("Transport.Models.Prijevoz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdPonudaPrijevoza");

                    b.Property<int?>("OcjenaNarucitelja");

                    b.Property<int?>("OcjenaPrijevoznika");

                    b.Property<string>("OpisUslugeNarucitelja")
                        .HasMaxLength(450);

                    b.Property<string>("OpisUslugePrijevoznika")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("IdPonudaPrijevoza");

                    b.ToTable("Prijevoz");
                });

            modelBuilder.Entity("Transport.Models.Prijevoznik", b =>
                {
                    b.Property<int>("IdKorisnik");

                    b.Property<string>("NazivTvrtke")
                        .HasColumnName("nazivTvrtke")
                        .HasMaxLength(150);

                    b.HasKey("IdKorisnik");

                    b.ToTable("Prijevoznik");
                });

            modelBuilder.Entity("Transport.Models.RazlogNaplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Razlog")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("RazlogNaplate");
                });

            modelBuilder.Entity("Transport.Models.StatusPonude", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("StatusPonude");
                });

            modelBuilder.Entity("Transport.Models.StatusZahtjeva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("StatusZahtjeva");
                });

            modelBuilder.Entity("Transport.Models.Vozilo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Boja")
                        .HasMaxLength(50);

                    b.Property<bool?>("Ekolosko");

                    b.Property<int>("IdPrijevoznik");

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("RegistarskaOznaka")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.Property<string>("Tip")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdPrijevoznik");

                    b.HasIndex("RegistarskaOznaka")
                        .IsUnique()
                        .HasName("UK_Vozilo");

                    b.ToTable("Vozilo");
                });

            modelBuilder.Entity("Transport.Models.VrstaLokacije", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Vrsta")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("VrstaLokacije");
                });

            modelBuilder.Entity("Transport.Models.VrstaNaplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Vrsta")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("VrstaNaplate");
                });

            modelBuilder.Entity("Transport.Models.Zahtjev", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CijenaNeizvrsenja");

                    b.Property<double?>("Duiljina");

                    b.Property<int>("IdNarucitelj");

                    b.Property<int>("IdStatusZahtjeva");

                    b.Property<double?>("Masa");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<double?>("Sirina");

                    b.Property<double?>("Visina");

                    b.Property<DateTime>("VrijemePocetka")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("VrijemeZavrsetka")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdNarucitelj");

                    b.HasIndex("IdStatusZahtjeva");

                    b.ToTable("Zahtjev");
                });

            modelBuilder.Entity("Transport.Models.ZahtjevLokacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdLokacija");

                    b.Property<int>("IdZahtjev");

                    b.HasKey("Id");

                    b.HasIndex("IdLokacija");

                    b.HasIndex("IdZahtjev");

                    b.ToTable("ZahtjevLokacija");
                });

            modelBuilder.Entity("Transport.ViewModels.KorisnikovProfilViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Ime")
                        .IsRequired();

                    b.Property<string>("KorisnickoIme")
                        .IsRequired();

                    b.Property<string>("Lozinka")
                        .IsRequired();

                    b.Property<string>("NazivTvrtke");

                    b.Property<float>("OcjenaNarucitelj");

                    b.Property<float>("OcjenaPrijevoznik");

                    b.Property<string>("Oib")
                        .IsRequired();

                    b.Property<string>("Prezime")
                        .IsRequired();

                    b.Property<string>("TelBroj")
                        .IsRequired();

                    b.Property<string>("ZahtijevaEko");

                    b.HasKey("Id");

                    b.ToTable("KorisnikovProfilViewModel");
                });

            modelBuilder.Entity("Transport.ViewModels.ProsireniPrijevozViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("NaplataNaručiteljuId");

                    b.Property<int?>("NaplataPrijevoznikuId");

                    b.Property<int?>("PrijevozId");

                    b.Property<int?>("ProsireniZahtjevId");

                    b.HasKey("Id");

                    b.HasIndex("NaplataNaručiteljuId");

                    b.HasIndex("NaplataPrijevoznikuId");

                    b.HasIndex("PrijevozId");

                    b.HasIndex("ProsireniZahtjevId");

                    b.ToTable("ProsireniPrijevoz");
                });

            modelBuilder.Entity("Transport.ViewModels.ProsireniZahtjevViewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CijenaNeizvrsenja");

                    b.Property<double?>("Duiljina");

                    b.Property<int>("IdNarucitelj");

                    b.Property<int?>("IdNaruciteljNavigationIdKorisnik");

                    b.Property<int>("IdStatusZahtjeva");

                    b.Property<int?>("IdStatusZahtjevaNavigationId");

                    b.Property<double?>("Masa");

                    b.Property<int>("OdredisnaLokacijaKucniBroj");

                    b.Property<string>("OdredisnaLokacijaUlica")
                        .IsRequired();

                    b.Property<string>("OdredisnoMjesto")
                        .IsRequired();

                    b.Property<int>("OdredisnoMjestoPbr");

                    b.Property<string>("Opis")
                        .IsRequired();

                    b.Property<int>("PocetnaLokacijaKucniBroj");

                    b.Property<string>("PocetnaLokacijaUlica")
                        .IsRequired();

                    b.Property<string>("PocetnoMjesto")
                        .IsRequired();

                    b.Property<int>("PocetnoMjestoPbr");

                    b.Property<double?>("Sirina");

                    b.Property<double?>("Visina");

                    b.Property<DateTime>("VrijemePocetka");

                    b.Property<DateTime?>("VrijemeZavrsetka");

                    b.HasKey("Id");

                    b.HasIndex("IdNaruciteljNavigationIdKorisnik");

                    b.HasIndex("IdStatusZahtjevaNavigationId");

                    b.ToTable("ProsireniZahtjev");
                });

            modelBuilder.Entity("Transport.Models.Lokacija", b =>
                {
                    b.HasOne("Transport.Models.Mjesto", "IdMjestoNavigation")
                        .WithMany("Lokacija")
                        .HasForeignKey("IdMjesto")
                        .HasConstraintName("Lokacija_Mjesto_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Transport.Models.VrstaLokacije", "IdVrstaLokacijeNavigation")
                        .WithMany("Lokacija")
                        .HasForeignKey("IdVrstaLokacije")
                        .HasConstraintName("Lokacija_VrstaLokacije_FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Transport.Models.Naplata", b =>
                {
                    b.HasOne("Transport.Models.Prijevoz", "IdPrijevozNavigation")
                        .WithMany("Naplata")
                        .HasForeignKey("IdPrijevoz")
                        .HasConstraintName("Naplata_Prijevoz_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Transport.Models.RazlogNaplate", "IdRazlogNavigation")
                        .WithMany("Naplata")
                        .HasForeignKey("IdRazlog")
                        .HasConstraintName("Naplata_RazlogNaplate_FK");

                    b.HasOne("Transport.Models.VrstaNaplate", "IdVrstaNaplateNavigation")
                        .WithMany("Naplata")
                        .HasForeignKey("IdVrstaNaplate")
                        .HasConstraintName("Naplata_VrstaNaplate_FK");
                });

            modelBuilder.Entity("Transport.Models.Narucitelj", b =>
                {
                    b.HasOne("Transport.Models.Korisnik", "IdKorisnikNavigation")
                        .WithOne("Narucitelj")
                        .HasForeignKey("Transport.Models.Narucitelj", "IdKorisnik")
                        .HasConstraintName("Narucitelj_Korisnik_FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Transport.Models.PonudaPrijevoza", b =>
                {
                    b.HasOne("Transport.Models.Prijevoznik", "IdPrijevoznikNavigation")
                        .WithMany("PonudaPrijevoza")
                        .HasForeignKey("IdPrijevoznik")
                        .HasConstraintName("PonudaPrijevoza_Prijevoznik_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Transport.Models.StatusPonude", "IdStatusPonudeNavigation")
                        .WithMany("PonudaPrijevoza")
                        .HasForeignKey("IdStatusPonude")
                        .HasConstraintName("PonudaPrijevoza_StatusPonude_FK");

                    b.HasOne("Transport.Models.Zahtjev", "IdZahtjevNavigation")
                        .WithMany("PonudaPrijevoza")
                        .HasForeignKey("IdZahtjev")
                        .HasConstraintName("FK_PonudaPrijevoza_Zahtjev");
                });

            modelBuilder.Entity("Transport.Models.Prijevoz", b =>
                {
                    b.HasOne("Transport.Models.PonudaPrijevoza", "IdPonudaPrijevozaNavigation")
                        .WithMany("Prijevoz")
                        .HasForeignKey("IdPonudaPrijevoza")
                        .HasConstraintName("Prijevoz_PonudaPrijevoza_FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Transport.Models.Prijevoznik", b =>
                {
                    b.HasOne("Transport.Models.Korisnik", "IdKorisnikNavigation")
                        .WithOne("Prijevoznik")
                        .HasForeignKey("Transport.Models.Prijevoznik", "IdKorisnik")
                        .HasConstraintName("Prijevoznik_Korisnik_FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Transport.Models.Vozilo", b =>
                {
                    b.HasOne("Transport.Models.Prijevoznik", "IdPrijevoznikNavigation")
                        .WithMany("Vozilo")
                        .HasForeignKey("IdPrijevoznik")
                        .HasConstraintName("Vozilo_Prijevoznik_FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Transport.Models.Zahtjev", b =>
                {
                    b.HasOne("Transport.Models.Narucitelj", "IdNaruciteljNavigation")
                        .WithMany("Zahtjev")
                        .HasForeignKey("IdNarucitelj")
                        .HasConstraintName("Zahtjev_Narucitelj_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Transport.Models.StatusZahtjeva", "IdStatusZahtjevaNavigation")
                        .WithMany("Zahtjev")
                        .HasForeignKey("IdStatusZahtjeva")
                        .HasConstraintName("Zahtjev_StatusZahtjeva_FK");
                });

            modelBuilder.Entity("Transport.Models.ZahtjevLokacija", b =>
                {
                    b.HasOne("Transport.Models.Lokacija", "IdLokacijaNavigation")
                        .WithMany("ZahtjevLokacija")
                        .HasForeignKey("IdLokacija")
                        .HasConstraintName("ZahtjevLokacija_Lokacija_FK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Transport.Models.Zahtjev", "IdZahtjevNavigation")
                        .WithMany("ZahtjevLokacija")
                        .HasForeignKey("IdZahtjev")
                        .HasConstraintName("ZahtjevLokacija_Zahtjev_FK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Transport.ViewModels.ProsireniPrijevozViewModel", b =>
                {
                    b.HasOne("Transport.Models.Naplata", "NaplataNaručitelju")
                        .WithMany()
                        .HasForeignKey("NaplataNaručiteljuId");

                    b.HasOne("Transport.Models.Naplata", "NaplataPrijevozniku")
                        .WithMany()
                        .HasForeignKey("NaplataPrijevoznikuId");

                    b.HasOne("Transport.Models.Prijevoz", "Prijevoz")
                        .WithMany()
                        .HasForeignKey("PrijevozId");

                    b.HasOne("Transport.ViewModels.ProsireniZahtjevViewModel", "ProsireniZahtjev")
                        .WithMany()
                        .HasForeignKey("ProsireniZahtjevId");
                });

            modelBuilder.Entity("Transport.ViewModels.ProsireniZahtjevViewModel", b =>
                {
                    b.HasOne("Transport.Models.Narucitelj", "IdNaruciteljNavigation")
                        .WithMany()
                        .HasForeignKey("IdNaruciteljNavigationIdKorisnik");

                    b.HasOne("Transport.Models.StatusZahtjeva", "IdStatusZahtjevaNavigation")
                        .WithMany()
                        .HasForeignKey("IdStatusZahtjevaNavigationId");
                });
#pragma warning restore 612, 618
        }
    }
}
